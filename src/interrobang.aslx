<!--Saved by Quest 5.4.4873.16527-->
<asl version="540">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <game name="interrobang">
    <gameid>39702944-ce39-4243-8459-2aaad4c4d15e</gameid>
    <version>0.0.0</version>
    <firstpublished>2014</firstpublished>
    <category type="string"></category>
    <gridmap />
    <start type="script">
      // All of the initial "slots" of the snake are filled with the player's current room
      player.snake_rooms = NewObjectList()
      curRoom = ObjectListItem(ListParents(player),0)
      for (index, 0, player.length-1) {
        list add (player.snake_rooms, curRoom)
      }
      // The first checkpoint is the player's current room
      player.checkpoint = curRoom
    </start>
  </game>
  <object name="Prototype">
    <inherit name="editor_room" />
    <object name="r00">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="east" to="r01">
        <inherit name="eastdirection" />
        <look type="script">
          look_room (r01)
        </look>
      </exit>
      <exit alias="south" to="r10">
        <inherit name="southdirection" />
        <look type="script">
          look_room (r10)
        </look>
      </exit>
      <exit alias="in" to="vent00">
        <inherit name="indirection" />
        <locked />
        <lockmessage>It looks like it opens from the inside.</lockmessage>
        <look type="script">
          look_room (vent00)
        </look>
      </exit>
    </object>
    <object name="r01">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="west" to="r00">
        <inherit name="westdirection" />
        <look type="script">
          look_room (r00)
        </look>
      </exit>
      <exit alias="east" to="r02">
        <inherit name="eastdirection" />
        <look type="script">
          look_room (r02)
        </look>
      </exit>
      <exit alias="south" to="r11">
        <inherit name="southdirection" />
        <look type="script">
          look_room (r11)
        </look>
      </exit>
    </object>
    <object name="r02">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="west" to="r01">
        <inherit name="westdirection" />
        <look type="script">
          look_room (r01)
        </look>
      </exit>
      <exit alias="south" to="r12">
        <inherit name="southdirection" />
        <look type="script">
          look_room (r12)
        </look>
      </exit>
    </object>
    <object name="r10">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="north" to="r00">
        <inherit name="northdirection" />
      </exit>
      <exit alias="south" to="r20">
        <inherit name="southdirection" />
      </exit>
      <exit alias="east" to="r11">
        <inherit name="eastdirection" />
      </exit>
    </object>
    <object name="r11">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="north" to="r01">
        <inherit name="northdirection" />
        <look type="script">
          look_room (r01)
        </look>
      </exit>
      <exit alias="west" to="r10">
        <inherit name="westdirection" />
        <look type="script">
          look_room (r10)
        </look>
      </exit>
      <exit alias="east" to="r12">
        <inherit name="eastdirection" />
        <look type="script">
          look_room (r12)
        </look>
      </exit>
      <exit alias="south" to="r21">
        <inherit name="southdirection" />
        <look type="script">
          look_room (r21)
        </look>
      </exit>
      <object name="player">
        <inherit name="editor_object" />
        <inherit name="editor_player" />
        <maxobjects type="int">1</maxobjects>
        <containermaxobjects>You feel weak...You can only manage to carry one object.</containermaxobjects>
        <length type="int">4</length>
        <attr name="show_debug" type="int">0</attr>
      </object>
    </object>
    <object name="r12">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="north" to="r02">
        <inherit name="northdirection" />
        <look type="script">
          look_room (r02)
        </look>
      </exit>
      <exit alias="west" to="r11">
        <inherit name="westdirection" />
        <look type="script">
          look_room (r11)
        </look>
      </exit>
      <exit alias="south" to="r22">
        <inherit name="southdirection" />
        <look type="script">
          look_room (r22)
        </look>
      </exit>
      <exit name="finishExit" alias="east" to="finish">
        <inherit name="eastdirection" />
        <locked />
        <runscript />
        <script type="script">
          finish
        </script>
      </exit>
      <object name="cardReader">
        <inherit name="editor_room" />
      </object>
    </object>
    <object name="r20">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="north" to="r10">
        <inherit name="northdirection" />
        <look type="script">
          look_room (r10)
        </look>
      </exit>
      <exit alias="east" to="r21">
        <inherit name="eastdirection" />
        <look type="script">
          look_room (r21)
        </look>
      </exit>
      <exit name="vent20in" alias="in" to="vent20">
        <inherit name="indirection" />
        <locked />
        <runscript type="boolean">false</runscript>
        <lockmessage>The box is blocking the vent.</lockmessage>
        <look type="script">
          look_room (vent20)
        </look>
      </exit>
      <object name="box">
        <inherit name="editor_object" />
        <push type="script">
          UnlockExit (vent20in)
        </push>
      </object>
    </object>
    <object name="r21">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="north" to="r11">
        <inherit name="northdirection" />
        <look type="script">
          look_room (r11)
        </look>
      </exit>
      <exit alias="east" to="r22">
        <inherit name="eastdirection" />
        <look type="script">
          look_room (r22)
        </look>
      </exit>
      <exit alias="west" to="r20">
        <inherit name="westdirection" />
        <look type="script">
          look_room (r20)
        </look>
      </exit>
    </object>
    <object name="r22">
      <inherit name="editor_room" />
      <onexit type="script">
        change_rooms
      </onexit>
      <exit alias="north" to="r12">
        <inherit name="northdirection" />
        <look type="script">
          look_room (r12)
        </look>
      </exit>
      <exit alias="west" to="r21">
        <inherit name="westdirection" />
        <look type="script">
          look_room (r21)
        </look>
      </exit>
      <object name="deadRat">
        <inherit name="editor_object" />
        <alias>dead rat</alias>
        <alt type="stringlist">
          <value>rat</value>
          <value>dead rat</value>
        </alt>
        <take type="boolean">false</take>
        <eat type="script">
          grow_snake
        </eat>
        <consume type="script">
          grow_snake
        </consume>
        <swallow type="script">
          grow_snake
        </swallow>
      </object>
    </object>
    <object name="vent">
      <inherit name="editor_room" />
      <object name="vent00">
        <inherit name="editor_room" />
        <onexit type="script">
          change_rooms
        </onexit>
        <exit alias="south" to="vent10">
          <inherit name="southdirection" />
          <look type="script">
            look_room (vent10)
          </look>
        </exit>
        <exit alias="out" to="r00">
          <inherit name="outdirection" />
          <look type="script">
            look_room (r00)
          </look>
        </exit>
      </object>
      <object name="vent10">
        <inherit name="editor_room" />
        <onexit type="script">
          change_rooms
        </onexit>
        <exit alias="north" to="vent00">
          <inherit name="northdirection" />
          <look type="script">
            look_room (vent00)
          </look>
        </exit>
        <exit alias="south" to="vent20">
          <inherit name="southdirection" />
          <look type="script">
            look_room (vent20)
          </look>
        </exit>
        <object name="keyCard">
          <inherit name="editor_object" />
          <alias>Key Card</alias>
          <take />
          <selfuseon type="scriptdictionary">
            <item key="cardReader">
              UnlockExit (finishExit)
            </item>
          </selfuseon>
        </object>
      </object>
      <object name="vent20">
        <inherit name="editor_room" />
        <onexit type="script">
          change_rooms
        </onexit>
        <exit alias="north" to="vent10">
          <inherit name="northdirection" />
          <look type="script">
            look_room (vent10)
          </look>
        </exit>
        <exit alias="out" to="r20">
          <inherit name="outdirection" />
          <look type="script">
            look_room (r20)
          </look>
        </exit>
      </object>
    </object>
    <object name="finish">
      <inherit name="editor_room" />
    </object>
  </object>
  <command>
    <pattern>debug</pattern>
    <script>
      if (player.show_debug = 0) {
        player.show_debug = 1
        msg ("Debug now on.")
      }
      else {
        player.show_debug = 0
        msg ("Debug now off.")
      }
    </script>
  </command>
  <command>
    <pattern>test_changerms</pattern>
    <script>
      change_rooms
    </script>
  </command>
  <command>
    <pattern>test_clearrms</pattern>
    <script>
      clear_rooms
    </script>
  </command>
  <command>
    <pattern>test_grow</pattern>
    <script>
      grow_snake
    </script>
  </command>
  <command>
    <pattern>test_list</pattern>
    <script>
      list_rooms
    </script>
  </command>
  <verb>
    <property>consume</property>
    <pattern>consume</pattern>
    <defaultexpression>"You can't consume " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>swallow</property>
    <pattern>swallow</pattern>
    <defaultexpression>"You can't swallow " + object.article + "."</defaultexpression>
  </verb>
  <type name="not_snake_room" />
  <function name="change_rooms">
    // This function handles movement into a "snake room" by storing a list
    // of the previously visited rooms, where index 0 is the snake's tail
    // and index (player.length-1) is the head
    curRoom = ObjectListItem(ListParents(player),0)
    if (not DoesInherit (curRoom, "not_snake_room")) {
      list_rooms
      // Remove the tail room at index 0
      tailRoom = ObjectListItem(player.snake_rooms, 0)
      list remove (player.snake_rooms, tailRoom)
      // Check whether the newest room is in the list already
      // indexHit corresponds to the snake's body part that we run into, if we run into it
      count = 0
      indexHit = 0
      foreach (rm, player.snake_rooms) {
        count = count + 1
        if (rm.name = curRoom.name) {
          indexHit = count
        }
      }
      // Now add in the new head room (we do this now even if we've bitten ourself)
      list add (player.snake_rooms, curRoom)
      if (indexHit = player.length-2) {
        // We hit our own body at the head, give a no turn back message
        msg ("You can't go back that way, the snake is behind you.")
        // TODO: Stop the area transition somehow
      }
      else if (not indexHit = 0) {
        // We hit our own body, give a game over message
        game_over_checkpoint_restart
      }
      list_rooms
    }
  </function>
  <function name="look_room" parameters="lookRoom"><![CDATA[
    // This function is called when we look into a room. Test if that room is in our list.
    // indexHit corresponds to the snake's body part that we see, if we see it
    count = 0
    indexHit = 0
    foreach (rm, player.snake_rooms) {
      count = count + 1
      if (rm.name = lookRoom.name) {
        indexHit = count
      }
    }
    if (indexHit = player.length-1) {
      // We see our own body at the head, give a no turn back message
      msg ("You can't go back that way, the snake is behind you.")
    }
    else if (indexHit > 1) {
      // We see our own body in the middle, give a warning message
      msg ("You see a large, scaly body stretching across that room. Who knows what it belongs to?")
    }
    else if (indexHit = 1) {
      // We see our own tail, give an okay message
      msg ("You see the tip of a scaly tail. It looks like the monster is passing through. If you're quiet you can go this way.")
    }
    else {
      // No snake to see, give an all clear message
      msg ("That way is dark, empty and quiet.")
    }
  ]]></function>
  <function name="clear_rooms">
    // This function "clears out" all of the current room tracking and resets it all to the player's current room.
    player.snake_rooms = NewObjectList()
    curRoom = ObjectListItem(ListParents(player),0)
    for (index, 0, player.length-1) {
      list add (player.snake_rooms, curRoom)
    }
  </function>
  <function name="grow_snake">
    // This function increases the snake's length by 1 and fixes the room tracking list to add on another "slot"
    // When the player changes rooms after they've "grown", it's like they get one room longer at the neck
    player.length = player.length + 1
    curRoom = ObjectListItem(ListParents(player),0)
    // We have to do this gross thing of putting the new element in its own list so that we can combine it with
    // the existing snake_rooms list in the correct order.
    curRoomList = NewObjectList()
    list add (curRoomList, curRoom)
    player.snake_rooms = ListCombine (curRoomList, player.snake_rooms)
    list_rooms
  </function>
  <function name="list_rooms">
    // This function lists the rooms the snake's body is in from tail to head.
    if (player.show_debug = 1) {
      msg ("Current rooms in the list are: ")
      msg ("-Tail")
      foreach (rm, player.snake_rooms) {
        msg ("-"+rm.name)
      }
      msg ("-Head")
    }
  </function>
  <function name="set_checkpoint">
    // Set a checkpoint that the player can be sent back to (coiled up) if they die
    player.checkpoint = ObjectListItem(ListParents(player),0)
  </function>
  <function name="game_over_checkpoint_restart">
    // This function handles sending the player back to the last checkpoint if they die.
    // The player arrives coiled up on that spot.
    msg ("A large, scaly body spans the room. The creature that's been chasing you has found you. You feel a sharp pain, and everything goes black.")
    msg ("MOVING TO LAST CHECKPOINT")
    clear_rooms
    MoveObject (player, player.checkpoint)
    clear_rooms
  </function>
</asl>